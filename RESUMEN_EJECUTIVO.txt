================================================================================
                    PROYECTO 3 - RESUMEN EJECUTIVO
                   Arquitectura de Computadores
                          Grupo 7
                    29 de octubre de 2025
================================================================================

‚úÖ ESTADO: PROYECTO COMPLETADO Y VALIDADO - LISTO PARA ENTREGA

================================================================================
                        PRUEBAS REALIZADAS HOY
================================================================================

1. S√çNTESIS FPGA CON APIO
   Comando: apio build
   Resultado: [SUCCESS] Took 22.78 seconds
   Archivos: hardware.bin (31 KB) ‚úÖ

2. SIMULACI√ìN TESTBENCH  
   Comando: iverilog + vvp test.out
   Resultado: ‚úì‚úì‚úì TODOS LOS TESTS PASARON ‚úì‚úì‚úì
   Tests: 5/5 exitosos ‚úÖ

3. VALIDACI√ìN PROGRAMA
   - A inicializa a 15 ‚úÖ
   - Cuenta regresiva 15‚Üí0 ‚úÖ
   - Se detiene en 0 ‚úÖ
   - Reinicia correctamente ‚úÖ

================================================================================
                      COMANDOS PARA LA DEMO
================================================================================

FLASHEAR FPGA:
  source apio-env/bin/activate
  apio upload

SI NECESITAS RECOMPILAR:
  apio build && apio upload

================================================================================
                    QU√â DEBE PASAR EN LA DEMO
================================================================================

1. Display de 7 segmentos muestra: 15 ‚Üí 14 ‚Üí 13 ‚Üí ... ‚Üí 01 ‚Üí 00
2. LEDs muestran en binario: 1111 ‚Üí 1110 ‚Üí ... ‚Üí 0001 ‚Üí 0000
3. Tiempo entre decrementos: ~0.67 segundos (visible a ojo)
4. Al llegar a 0, se detiene y se mantiene

================================================================================
                  RESPUESTAS PARA EL AYUDANTE
================================================================================

P: "¬øC√≥mo funciona el programa contador?"
R: "El CPU ejecuta un programa de 7 instrucciones almacenado en ROM.
    El programa carga 15 en el registro A, luego entra en un loop que
    compara A con 0. Si A != 0, lo decrementa y repite. Si A == 0,
    termina. NO est√° hardcoded en Verilog, el CPU lo ejecuta
    instrucci√≥n por instrucci√≥n."

P: "¬øC√≥mo se muestran los resultados?"
R: "Los 4 LEDs se conectan directamente a los bits 0-3 del registro A
    mediante 'assign o_LED_X = regA_value[X]'. El display usa el m√≥dulo
    sevenseg que convierte el valor binario de regA a BCD para mostrar
    en decimal de 0 a 15."

P: "¬øQu√© frecuencia de reloj usa?"
R: "La Go Board tiene un reloj de 25 MHz. Lo divido con un contador de
    25 bits. El CPU usa div_clk[24] que da aproximadamente 1.5 Hz para
    que el conteo sea visible a ojo humano."

P: "¬øD√≥nde est√° el programa?"
R: "En instruction_memory.v, l√≠neas 25-52, en el bloque 'initial' para
    s√≠ntesis. Son 7 instrucciones de 15 bits hardcoded en la ROM."

================================================================================
                    ARQUITECTURA DEL CPU
================================================================================

- Tipo: 8-bit, Harvard
- Instrucciones: 15 bits (7 opcode, 8 data/addr)
- Registros: A, B, PC, Status
- ALU: 16 operaciones
- Saltos: Condicionales (JEQ, JNE, etc.) e incondicionales (JMP)
- Memoria: 256 palabras de instrucciones, 256 bytes de datos

================================================================================
                    PROGRAMA EN ASSEMBLY
================================================================================

Addr | Binario          | Instrucci√≥n    | Descripci√≥n
-----|------------------|----------------|---------------------------
  0  | 000001000001111  | MOV A, 15      | Cargar 15 en A
  1  | 000001100000000  | MOV B, 0       | Loop: Cargar 0 en B
  2  | 100110100000000  | CMP A, B       | Comparar A con B
  3  | 101010000000110  | JEQ End        | Si A==0, saltar a 6
  4  | 000101000000001  | SUB A, 1       | A = A - 1
  5  | 101001100000001  | JMP Loop       | Saltar a 1
  6  | 000001000000000  | End: MOV A, 0  | Dejar A en 0
  7+ | 000000000000000  | NOP            | No operation

================================================================================
                    ARCHIVOS CLAVE
================================================================================

PARA FPGA:
  - hardware.bin (31 KB) - Binario listo para flashear ‚úÖ
  - hardware.pcf - Mapeo de pines Go Board ‚úÖ
  - main.v - M√≥dulo top con LEDs y display ‚úÖ

DOCUMENTACI√ìN:
  - CHEAT_SHEET.md - Respuestas r√°pidas para demo
  - CHECKLIST_ENTREGA.md - Checklist completo
  - VALIDACION_PROGRAMA.md - Validaci√≥n t√©cnica
  - REGISTRO_PRUEBAS.md - Log de todas las pruebas

UTILIDADES:
  - helper_nuevo.sh - Script con comandos comunes
  - im.dat - Programa para simulaci√≥n

================================================================================
                    TROUBLESHOOTING
================================================================================

FPGA no detectada:
  1. Verificar cable USB
  2. ls /dev/cu.* para ver dispositivos
  3. Reconectar si es necesario

Display no muestra:
  1. Verificar hardware.pcf (mapeo de pines)
  2. Verificar l√≥gica negativa de segmentos

Contador muy r√°pido/lento:
  Cambiar bit del divisor en main.v:
  - Actual: div_clk[24] ‚âà 1.5 Hz
  - M√°s r√°pido: div_clk[23] ‚âà 3 Hz
  - Muy r√°pido: div_clk[22] ‚âà 6 Hz

================================================================================
                    CHECKLIST FINAL
================================================================================

ANTES DE LA DEMO:
  [‚úì] hardware.bin generado
  [‚úì] Testbench simulado y pasando
  [‚úì] Documentaci√≥n completa
  [‚úì] CHEAT_SHEET.md accesible
  
EN EL LABORATORIO:
  [ ] FPGA conectada al USB
  [ ] Terminal abierta en carpeta del proyecto
  [ ] Entorno activado (source apio-env/bin/activate)
  [ ] Ejecutar: apio upload
  [ ] Verificar display y LEDs funcionando
  [ ] Explicar al ayudante

PARA OPENLANE:
  [ ] config.json preparado
  [ ] Conocer ubicaci√≥n de reportes
  [ ] Saber mostrar √°rea, compuertas, GDS

================================================================================
                    PUNTOS CLAVE
================================================================================

1. ‚≠ê EL CONTADOR NO EST√Å HARDCODED - Es un programa que ejecuta el CPU
2. ‚≠ê FRECUENCIA VISIBLE - ~1.5 Hz para que se vea el conteo
3. ‚≠ê LEDS = BINARIO, DISPLAY = DECIMAL - Misma fuente (regA)
4. ‚≠ê IFDEF SIMULATION - C√≥digo diferente para sim vs s√≠ntesis
5. ‚≠ê GO BOARD = 25 MHZ - Necesita divisor de reloj

================================================================================
                    M√âTRICAS DEL DISE√ëO
================================================================================

S√≠ntesis:
  - Tiempo: 22.78 segundos
  - Herramienta: Yosys + nextpnr + icepack
  - Target: iCE40-HX1K
  - Binario: 31,744 bytes

Simulaci√≥n:
  - Tests pasados: 5/5 (100%)
  - Ciclos totales: ~332
  - VCD generado: 47 KB

C√≥digo:
  - M√≥dulos: 18 archivos .v
  - Instrucciones programa: 7 + NOPs
  - Tama√±o ROM: 256 x 15 bits

================================================================================
                    ¬°√âXITO EN LA ENTREGA!
================================================================================

Todo est√° validado y funcionando. Revisa CHEAT_SHEET.md antes de la demo.

Documentos importantes:
  1. CHEAT_SHEET.md - Respuestas r√°pidas
  2. CHECKLIST_ENTREGA.md - Lista completa
  3. VALIDACION_PROGRAMA.md - Detalles t√©cnicos

Comando esencial: source apio-env/bin/activate && apio upload

¬°Mucha suerte! üöÄ

================================================================================
